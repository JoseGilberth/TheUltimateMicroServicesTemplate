host: 
  bd: jdbc:postgresql://localhost:5433
  local: http://localhost:8603
  front-end: http://localhost:4200
  eureka: http://localhost:8600
  security: http://localhost:8602
  correo: http://localhost:8603
  usuarios: http://localhost:8604
  admin: http://localhost:8605
  publico: http://localhost:8606
  catalogos: http://localhost:8607 
  zipkin: http://127.0.0.1:9411


spring:
  profiles:
    active: '@activatedProperties@'
  banner:
    location: classpath:/banners/banner-dev.txt
  main:
    allow-bean-definition-overriding: true
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: America/Mexico_City 
    locale: es_MX
  mail:
    default-encoding: UTF-8
    host: smtp.ionos.mx
    username: pruebas@smart-develop.mx
    password: Pru3b4s,.-
    port: 587
    properties:
      mail:
        ssl:
          enable: true
        smtp:
          auth: true
          ssl:
            trust: smtp.ionos.mx
          starttls:
            enable: true
            required: true
    protocol: smtp
    test-connection: false
  datasource: # CONFIGURACIONES DE CONEXION
    url: ${host.bd}/template  #jdbc:mysql://localhost/mitienditamain?zeroDateTimeBehavior=CONVERT_TO_NULL&serverTimezone=America/Mexico_City
    username: template
    password: sql2016r2
    driver-class-name: org.postgresql.Driver
    initialization-mode: always
    continue-on-error: true
    hikari:
      connection-timeout: 20000 #(20 segundos) maximum number of milliseconds that a client will wait for a connection
      minimum-idle: 10 #minimum number of idle connections maintained by HikariCP in a connection pool
      maximum-pool-size: 10 #maximum pool size
      idle-timeout: 10000 #(10 segundos)maximum idle time for connection
      max-lifetime: 1000 #(1 segundo) maximum lifetime in milliseconds of a connection in the pool after it is closed.
      auto-commit: true #default auto-commit behavior.
  jpa:  ## DIRECTIVA Y CONFIGURACIONES DEL FRAMEWORK JPA
    show-sql : true # Muestra o pinta lo que hace pda los queryes
    database: postgresql # lenguaje de los querys es mysql
    hibernate:
      ddl-auto: update # quieres actualizar la tabla cada vezx que se conecte
    properties:
      hibernate:
        generate_statistics: false
        order_inserts: true
        jdbc:
          batch_size: 100
        format_sql: true # le da formato a los query
        dialect: org.hibernate.dialect.PostgreSQLDialect
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  # ZIPKIN
  zipkin:
    enabled: true
    discovery-client-enabled: true
  # SLEUTH
  sleuth: 
    enabled: true
    feign:
      enabled: true
    http:
      enabled: true
    zuul:
      enabled: true   
    sampler:
      probability: 1
  # BOOT ADMIN
  boot:
    admin:
      client:
        enabled: true
        url: ${host.eureka}/discovery-server/admin
        instance:
          service-base-url: ${host.local}
        period: 3600000 # milisegundos : 30 minutos  Interval for repeating the registration 


# CORREO    
correo:   
  registro:  ${host.local}/micro-template/micro-usuarios/usuarios/publico/registro/activar/
  correo: pruebas@smart-develop.mx
  soporte: pruebas@smart-develop.mx 


# EUREKA
eureka:
  instance:
    prefer-ip-address: false 
    hostname: localhost
    #Indicates the time in seconds that the eureka server waits since it received the last heartbeat before it can remove this instance from its 
    #view and there by disallowing traffic to this instance.
    #Setting this value too long could mean that the traffic could be routed to the instance even though the instance is not alive. 
    #Setting this value too small could mean, the instance may be taken out of traffic because of temporary network glitches.
    #This value to be set to atleast higher than the value specified in leaseRenewalIntervalInSeconds.
    lease-expiration-duration-in-seconds:  1800 # 30 minutos
    #Indicates how often (in seconds) the eureka client needs to send heartbeats to eureka server to indicate that it is still alive. 
    #If the heartbeats are not received for the period specified in leaseExpirationDurationInSeconds, 
    # eureka server will remove the instance from its view, there by disallowing traffic to this instance.
    #Note that the instance could still not take traffic if it implements HealthCheckCallback and then decides to make itself unavailable
    lease-renewal-interval-in-seconds:  1200 # 20 minutos
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: ${host.eureka}/discovery-server/eureka
    eureka-server-read-timeout-seconds: 60 # 1 minuto
    eureka-server-connect-timeout-seconds: 60 # 1 minuto
    registry-fetch-interval-seconds:  1800 #  30 minutos Indicates how often(in seconds) to fetch the registry information from the eureka server.

   
# METRICAS CON PROMETHEUS Y GRAFANA
management:
  server:
    port: 8603
  endpoint:
    metrics: 
      enabled: true
    shutdown:
      enabled: true
    health:
      show-details: always 
    prometheus:
      enabled: true
  endpoints:
    web: 
      exposure:
        include: "*" # TEMA DE SEGURIDAD EN PRODUCCION
  metrics:
    enable:
      root: true
    export:
      prometheus:
        enabled: true
        
# SWAGGER
swagger:
  config:
    resource-id: template_resource
    base-package: micro.correo
    variables:  
      app-name: Micro-Correo
      resource-owner-password-credentials-grant: ${host.local}/oauth/token
      client-id: template
      client-secret: 123
      scope-separator: ","
      oauth-builder: spring_oauth
      secured-paths: /jwt.* , /log.* , /sesiones.*, /cliente/detalle.*, /cliente/token.*


# SECURITY /correo/heartbeat/** , /correo/registro/** , /correo/cambiar/password/**, /actuator/**
security:
  jwt:
    resource-id: template_resource
  oauth2:
    unprotected-paths: /heartbeat/** , /actuator/** 
    swagger-paths: /v2/api-docs, /configuration/ui, /swagger-resources/**, /configuration/security, /swagger-ui.html, /webjars/**
    ignored-paths: /heartbeat
    resource:
      user-info-uri: ${host.security}/micro-auth/usuario
      preferTokenInfo: true


# LOGGER
logging:
  level:
    org:
      springframework:
        web: DEBUG
        security: TRACE
      apache:
        http:
          wire: TRACE 
      hibernate: 
        type:
          descriptor:
            sql:
              BasicBinder: TRACE # IMPRIME LOS DATOS ENTRANTES A HIBERNATE 
      
           